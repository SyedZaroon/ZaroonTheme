{% doc %}
  Renders a responsive image that might be wrapped in a link.

  When `width`, `height` and `crop` are provided, the image will be rendered
  with a fixed aspect ratio.

  Serves as an example of how to use the `image_url` filter and `image_tag` filter
  as well as how you can use LiquidDoc to document your code.

  @param {image} image - The image to be rendered
  @param {string} [url] - An optional destination URL for the image
  @param {string} [class] - Optional class to be added to the image wrapper
  @param {number} [width] - The highest resolution width of the image to be rendered
  @param {number} [height] - The highest resolution height of the image to be rendered
  @param {string} [crop] - The crop position of the image

  @example
  {% render 'image', image: product.featured_image %}
  {% render 'image', image: product.featured_image, url: product.url %}
  {% render 'image',
    class: 'product__image',
    image: product.featured_image,
    url: product.url,
    width: 1200,
    height: 800,
    crop: 'center',
  %}
{% enddoc %}

{% liquid
  # Get selected variant's image if available
  assign selected_variant = product.selected_or_first_available_variant
  assign image = selected_variant.featured_image | default: product.featured_image

  unless height
    assign width = width | default: image.width
  endunless

  if url
    assign wrapper = 'a'
  else
    assign wrapper = 'div'
  endif
%}

<{{ wrapper }}
  class="image {{ class }}"
  {% if url %}
    href="{{ url }}"
  {% endif %}
>
  {{ image | image_url: width: width, height: height, crop: crop | image_tag }}
</{{ wrapper }}>


{% stylesheet %}
  .image {
    display: block;
    position: relative;
    overflow: hidden;
    width: 100%;
    height: auto;
  }

  .image > img {
    width: 100%;
    height: auto;
  }
{% endstylesheet %}


<script>
document.addEventListener('DOMContentLoaded', () => {
  const productForm = document.querySelector('form[action*="/cart/add"]');
  const productImage = document.querySelector('[data-product-image]');
  
  if (!productForm || !productImage) return;

  productForm.addEventListener('change', async (event) => {
    // Find selected variant ID
    const formData = new FormData(productForm);
    const selectedVariantId = formData.get('id');

    if (!selectedVariantId) return;

    // Fetch product data from Shopify
    const handle = '{{ product.handle }}';
    const response = await fetch(`/products/${handle}.js`);
    const product = await response.json();

    // Find selected variant in product data
    const selectedVariant = product.variants.find(v => v.id == selectedVariantId);

    if (selectedVariant && selectedVariant.featured_image) {
      productImage.src = selectedVariant.featured_image.src;
      productImage.alt = selectedVariant.featured_image.alt || '{{ product.title }}';
    }
  });
});
</script>
